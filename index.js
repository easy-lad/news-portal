const path          = require('path');
const express       = require('express');
const NewsMemory    = require('./services/news-memory.js');
const NewsMongodb   = require('./services/news-mongodb.js');
const newsRouter    = require('./controllers/news-router.js');
const authenticator = require('./controllers/authenticator.js');
const response      = require('./utilities/response.js');

const port   = 8888;
const server = express();

const settingsMemory = {
    news: {
        users  : path.join(__dirname, 'config', 'users.json'),
        entries: [{ title: 'test: Memory', summary: 'created for test purposes', who: 'server' }]
    },
    auth: { session: { store: 'connect-mongo', port: 8008, dbName: 'loginSessions', collName: 'newsMemory' } }
};
const settingsMemory2 = {
    news: {
        users  : path.join(__dirname, 'config', 'users.json'),
        entries: [{ title: 'test: Memory2', summary: 'created for test purposes', who: 'server' }]
    }
};

const settingsMongo = {
    news: { port: 8008, dbName: 'newsPortal' },
    auth: { session: { store: 'connect-mongo', port: 8008, dbName: 'loginSessions', collName: 'newsMongo' } }
};
const settingsMongo2 = {
    news: { port: 8008, dbName: 'newsPortal2' }
};

// Using built-in middlewares to parse requests body contents in JSON and URL-encoded formats.
server.use('/api/news', express.json());
server.use('/api/news', express.urlencoded({ extended: false }));

// Two distinct memory-mapped news stores each mounted at two alternative routes.
server.use(['/api/news/mem', '/api/news/memory'], newsRouter(NewsMemory, authenticator.local, settingsMemory));
server.use(['/api/news/mem2', '/api/news/memory2'], newsRouter(NewsMemory, authenticator.basic, settingsMemory2));

// Two distinct MongoDB-based news stores each mounted at its own route.
server.use('/api/news/mongo', newsRouter(NewsMongodb, authenticator.local, settingsMongo));
server.use('/api/news/mongo2', newsRouter(NewsMongodb, authenticator.basic, settingsMongo2));

// Below, the first middleware issues an error with the explanation of why the request could not
// be fulfilled while the second middleware handles any errors either generated by our own
// middlewares (like the former) or raised elsewhere.
server.use(response.error404, response.error);

server.listen(port, () => console.log(`Server is listening on 0.0.0.0:${port}.`));
